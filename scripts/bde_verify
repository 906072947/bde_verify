#!/usr/bin/perl -w
#  -*-perl-*- check
#  -----------------------------------------------------------------------------
#  Copyright 2012 Dietmar Kuehl http://www.dietmar-kuehl.de              
#  Modified  2013 Hyman Rosen (hrosen4@bloomberg.net)
#  Distributed under the Boost Software License, Version 1.0. (See file  
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt).     
#  -----------------------------------------------------------------------------
# $Id$

use strict;
use Getopt::Long qw(:config no_ignore_case);

chomp(my $system   = `uname -s`);
my $clangver = "3.4";
my $gccver   = "4.8.1";
my $home     = "/home/hrosen4/bde_verify";
my $bb       = "/bb/build/share/packages/refroot/amd64/unstable/bb";
my $config   = "$home/bde_verify.cfg";
my @cl;
#my $exe      = "$home/$system-clang-$clangver/bde_verify";
#my $cc       = "/bb/mbigc/mbig816/llvm-$clangver/install-$system/bin/clang++";
my $exe      = "$home/$system-gcc-$gccver/bde_verify";
my $cc       = "/opt/swt/install/gcc-$gccver/bin/g++";
my $debug    = "";
my $verbose  = "";
my $help     = "";
my $definc   = 1;
my $defdef   = 1;
my @incs;
my @defs;
my @wflags;
my @lflags = (
    "cxx-exceptions",
    "diagnostics-show-name",
    "diagnostics-show-option",
);
my $dummy;
my @dummy;
my $std;
my @std;
my $warnoff;
my $tlonly;

sub usage()
{
    print "
    usage: $0 [options] [additional compiler options] file.cpp ...
        -I{directory}
        -D{macro}
        -w                       # disable normal compiler warnings
        -W{warning}
        -f{flag}
        --config=config_file     [$config]  
        --cl=config_line
        --bb=dir                 [$bb]
        --exe=bde_verify         [$exe]
        --[no]definc             [$definc]
        --[no]defdef             [$defdef]
        --toplevel
        --std=type
        --debug
        --verbose
        --help

";
    print "Invoked as\n", join(" \\\n", @ARGV), "\n";
    exit(1);
}

@ARGV = map { /^(-+[DIOWf])(.+)/ ? ($1, $2) : $_ } @ARGV;

GetOptions(
    'bb=s'       => \$bb,
    'config=s'   => \$config,
    'cl=s'       => \@cl,
    'debug'      => \$debug,
    'help|?'     => \$help,
    'exe=s'      => \$exe,
    'verbose|v'  => \$verbose,
    'definc!'    => \$definc,
    'defdef!'    => \$defdef,
    'w'          => \$warnoff,
    "I=s"        => \@incs,
    "D=s"        => \@defs,
    "W=s"        => \@wflags,
    "f=s"        => \@lflags,
    "std=s"      => \$std,
    "toplevel"   => \$tlonly,
    'llvm=s'     => \$dummy,
    "m32|m64|pipe|pthread|MMD|g|c" => \$dummy,
    "O|MF|o|march|mtune=s"         => \@dummy,
) and !$help and $#ARGV >= 0 or usage();

my @config = ("-plugin-arg-bde_verify", "config=$config")   if $config ne "";
my @debug  = ("-plugin-arg-bde_verify", "debug-on")         if $debug;
my @tlo    = ("-plugin-arg-bde_verify", "toplevel-only-on") if $tlonly;

@lflags = map { "-f$_" if $_ ne "no-strict-aliasing" } @lflags;
@wflags = map { "-W$_" } @wflags;
unshift @wflags, "-w" if $warnoff;

push(@defs, (
    "BB_THREADED",
    "BDE_BUILD_TARGET_DBG",
    "BDE_BUILD_TARGET_EXC",
    "BDE_BUILD_TARGET_MT",
    "_LINUX_SOURCE",
    "_REENTRANT",
    "_SYS_SYSMACROS_H",
    "_THREAD_SAFE",
)) if $defdef;
if ($defdef && !grep(m{\bbsl[^/]*$}, @ARGV)) {
    push(@defs, "BSL_OVERRIDES_STD");
}
@defs = map { "-D$_" } @defs;

for (@ARGV) {
    if (m{^(.*)/.*$}) {
        push(@incs, $1) unless grep($_ eq $1, @incs);
    } else {
        push(@incs, ".") unless grep($_ eq ".", @incs);
    }
}
push(@incs, (
    "$bb/include",
    "$bb/include/stlport",
)) if $definc;
push(@incs, map { chomp; $_; }
            qx{ $cc -xc++ -E -v /dev/null 2>&1 |
                sed -n '/^#include/,/^End of search list/p' |
                sed -n '/^ [/]/s/ //p'});
@incs = map { ("-I", $_, "-cxx-isystem", $_ ) } @incs;

push(@std, "-std=$std") if $std;

@cl = map { ("-plugin-arg-bde_verify", "config-line=$_") } @cl;

my @command = (
    "$exe",
    "-plugin",
    "bde_verify",
    @std,
    @debug,
    @config,
    @tlo,
    @cl,
    @defs,
    @incs,
    @lflags,
    @wflags,
    @ARGV);

print join(' ', @command), "\n" if $verbose;

exec @command;
