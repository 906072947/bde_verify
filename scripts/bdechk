#!/usr/bin/perl -w
#  -*-perl-*- check
#  ----------------------------------------------------------------------------
#  Copyright 2011 Dietmar Kuehl http://www.dietmar-kuehl.de              
#  Distributed under the Boost Software License, Version 1.0. (See file  
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt).     
#  ----------------------------------------------------------------------------
# $Id:$
use strict;

#  ----------------------------------------------------------------------------

my $debug = "";
my $compiler = "clang";
my $checktests = 0;
my $checksource = 1;
my $script = $0;

while (0 <= $#ARGV)
{
    if ($ARGV[0] eq "-debug")
    {
        $debug = " -plugin-arg-coolyse debug-on";
        shift @ARGV;
    }
    elsif ($ARGV[0] eq "-clang")
    {
        $compiler = "clang";
        shift @ARGV;
    }
    elsif ($ARGV[0] eq "-gcc")
    {
        $compiler = "g++";
        shift @ARGV;
    }
    elsif ($ARGV[0] eq "-tests")
    {
        $checktests = 1;
        $checksource = 0;
        shift @ARGV;
    }
    elsif ($ARGV[0] eq "-all")
    {
        $checktests = 1;
        $checksource = 1;
        shift @ARGV;
    }
    else
    {
        last;
    }
}

my @FILES = grep {
           /.mem$/
        || /.cpp$/
        || /.h%/
        ;
} @ARGV;

@ARGV = grep {
           !/-pipe/
        && !/-fno-strict-aliasing/
        && !/-march=pentium2/
        && !/-mtune=opteron/
        && !/-m32/
        && !/-c/
        && !/-Wp,-MMD,/
        && !/.mem$/
        && !/.cpp$/
        && !/.h%/
        ;
} @ARGV;

my $system = `uname`;
$system =~ s/\s*//g;
my $suffix = $system eq "Darwin"? "dylib": "so";

if ($system ne "Linux" && $system ne "Darwin")
{
    print "bdechk is currently only supported on Linux: please run on a Linux machine!\n";
    exit(1);
}

my $version="3.1";
my $shared = $script =~ /\/scripts\/bdechk/
    ? "$HOME/src/coolyser/Linux-g++-$version/coolyser.so"
    : "$HOME/bin/coolyser/Linux-g++-$version/coolyser.so";

my @clangoptions = (
    "-cc1",
    "-load $shared",
    "-plugin coolyse",
    "-plugin-arg-coolyse tool=bdechk",
    );
my $checkcfg = "-plugin-arg-coolyse config=$HOME/bin/coolyser/bdechk.cfg";
my $checktcfg = "-plugin-arg-coolyse config=$HOME/bin/coolyser/bdechk.t.cfg";

my @bdeoptions = (
    "-fcxx-exceptions",
    "-Wcast-align",
    "-Wcast-qual",
    "-Wall",
    "-Wextra",
    "-Wformat-security",
    "-Wformat-y2k",
    "-Winit-self",
    "-Wno-long-long",
    "-Wno-unknown-pragmas",
    "-Wpacked",
    "-Wpointer-arith",
    "-Wwrite-strings",
    "-Wdeprecated-writable-strings",
    "-Wunused-value",
    "-Wchar-subscripts",
    "-Wsign-compare",
    "-Wparentheses",
    "-Wstrict-overflow",
    # "-Wdelete-non-virtual-dtor", -dk:TODO
    "-Wvla",
    "-Wvolatile-register-var",
    "-Wunused-function",
    "-Wunused-variable",
    "-Wunused-parameter",
    "-Wignored-qualifiers",
    "-fdiagnostics-show-option",
    "-D__linux__",
    "-D__i386__",
    "-D__CLANG_GNUC__=4",
    "-D__CLANG_GNUC_MINOR__=4",
    "-D__CLANG_GNUC_PATCHLEVEL__=6",
    "-D__BDECHK__",
    "-DBDE_BUILD_CHK",
    "-isystem /opt/swt/install/gcc-4.4.6/include/c++/4.4.6",
    "-isystem /opt/swt/install/gcc-4.4.6/include/c++/4.4.6/x86_64-unknown-linux-gnu/32",
    "-isystem /opt/swt/install/gcc-4.4.6/include/c++/4.4.6/backward",
    "-I.",
    #"-I$HOME/src/git-bde/include/bsl",
    #"-I$HOME/src/git-bde/include/bde",
    #"-I$HOME/src/git-bde/include/bae",
    #"-I$HOME/src/git-bde/include/bce",
    "-I$HOME/src/git-bde/include/fixes",
    "-I/bbsrc/source/proot/include/stlport",
    "-I/bbsrc/source/proot/include/00depbuild",
    "-I/bbsrc/source/proot/include/00deployed",
    "-I/bbsrc/source/proot/include/00offlonly",
    "-I/usr/include",
    "-I/opt/swt/install/llvm-$version-64/lib/clang/$version/include",
    "-DBDE_BUILD_TARGET_DBG",
    "-DBDE_BUILD_TARGET_EXC",
    "-DBDE_BUILD_TARGET_MT",
#"-D__i386",
#"-U__x86_64",
#"-U__x86_64__",
    "-fexceptions",
    "-g",
    "-D_POSIX_PTHREAD_SEMANTICS",
    "-D_REENTRANT",
    "-DBSLS_IDENT_OFF",
    "-DBSL_OVERRIDES_STD",
    );
my $bdeflags = join(" ", @bdeoptions);

my $llvm    = $system eq "Darwin"? "/opt/llvm": "/opt/swt/install/llvm-$version-64";
my $home    = $system eq "Darwin"? "/Users/kuehl/src/cool/coolyser": "$HOME/bin/coolyser";
my $lib     = "$home/$system-$compiler/coolyser.$suffix";
my $flags   = "-I$llvm -I. -D_DEBUG -D_GNU_SOURCE -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS";
$flags = $bdeflags;
my $lflags  = "-fcxx-exceptions";
my $cflags  = join(" ", @clangoptions);
my $iflags  = "-I$HOME/src/git-bde/include/fixes "
    . join(" ", grep { /^-I/ } @ARGV);
my $uflags  = join(" ", grep { !/^-I/ } @ARGV);

my $gcclib = "/opt/swt/install/gcc-4.3.5/lib/sparcv9";
$ENV{"LD_LIBRARY_PATH"}    = $gcclib;
$ENV{"LD_LIBRARY_PATH_64"} = $gcclib;

my $tty = -t STDOUT;
sub runClang($$)
{
    my $options = shift;
    my $files = shift;
    my $config = $files =~ /\.t\.cpp/ ? $checktcfg: $checkcfg;
    my $command = "$llvm/bin/clang $debug $cflags $config $options $iflags $flags $lflags $uflags $files";
    #print "$command\n";
    print "checking $files\n";
    open(PIPE, "$command 2>&1 |") || die("can't execute command '$command'");
    while (<PIPE>)
    {
        chomp;
        if ($tty) {
            s/warning/\x1b[31mwarning\x1b[0m/;
        }
        print "$_\n";
    }
    close(PIPE);
}

for my $file (@FILES)
{
    if ($file =~ /(.*)\/[^\/]*\.mem$/)
    {
        my $path = $1;
        open(MEM, "< $file") || die("can't open file '$file' for reading");
        while (<MEM>)
        {
            chomp;
            my $file = $_;
            if ($checksource) {
                runClang("-I$path/.. -I$path/../..", "$path/../$file.cpp");
            }
            if ($checktests) {
                runClang("-I$path/.. -I$path/../..", "$path/../$file.t.cpp");
            }
        }
    }
    else
    {
        runClang("", "$file");
    }
}
exit 0;
# exit $$;
