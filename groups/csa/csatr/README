This directory contains components implementing the Third Rules.

TR01	Every package group must be unique and consist of three letters.
TR02	Package names start with package group name plus 1-4 characters.
TR03	Component names start with package name followed by an underscore and consist of .h and .cpp files.
TR04	Logical entities, except for free operators, must be nested inside the package namespace.
TR05	The package-qualified name of types and signatures of free operators must be unique throughout the enterprise.
TR06	The use of each logic entity declared at namespace scope alone should be sufficient to indicate its component.
TR07	A type name in a header at namespace level starting with an underscore is private to the component in which it is declared.
TR08	Every logical construct that is not local to an application file containing main() must reside in a component.
TR09	The .h file of a component must be included as the first substantive line in the component's .cpp.
TR10	A component must not define externally visible constructs that are not declared in it's header file.
TR11	A definition of a logical entity must not reside outside of the component in which it was declared.
TR12	A component accessing a definition in another component must do so via a #include directive.
TR13	Any direct use of a component by another component requires the #include directive to be present directly in the client component.
TR14	Each components .h file must contain predictable include guards.
TR15	Every logic construct in a component must reside directly or indirectly within the company-wide namespace BloombergLP.
TR16	using-directives must not appear at file or namespace level in a header file.
TR17	Headers only declare classes, structs, unions, and free operators at namespace scope. Definitions may include inline functions.
TR18	A header may only contain declarations of free operators using at least one of the component's types in its signature.
TR19	A single logic unit of encapsulation may only span one component, i.e. no inter-component friendship.
TR20	Cyclic physical dependencies among components are not permitted.
TR21	Every component must reside within exactly one package.
TR22	Anticipated direct dependencies of each package on other packages within the same group must be explicitly stated.
TR23	Cyclic dependencies among packages are not permitted.
TR24	Every package should reside within a package group.
TR25	Anticipated direct physical dependencies on other package groups, isolated packages, and third party products must be explicitly stated.
TR26	Cyclic dependencies among package groups are not permitted.
TR27	Every physical entity must be thoroughly testable in terms only of entities that have already been tested thoroughly.
TR28	The component test driver must reside in the same directory as the component. Empty test drivers are not allowed.
TR29	The direct dependencies of a test driver must not exceed those of the component under test (possibly except for test apparatus).
TR30	There is a well-defined subset of the invocation interface for each test driver that is standard across the enterprise.
